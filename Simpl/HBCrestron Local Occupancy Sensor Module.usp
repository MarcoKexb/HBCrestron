/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
#CATEGORY "46""HomeBridge" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "HBCrestronLibrary"                   

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
DIGITAL_INPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_,RemoveDevice,ResetDeviceConfig,Occupancy_Fb,StatusActive_Fb,StatusFault_Fb,StatusTampered_Fb,StatusLowBattery_Fb;

DIGITAL_OUTPUT _SKIP_,_SKIP_,_SKIP_,_SKIP_,_SKIP_;
// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
// STRING_OUTPUT 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER
INTEGER_PARAMETER SupportsStatusActive,SupportsStatusFault,SupportsStatusTampered,SupportsStatusLowBattery;
STRING_PARAMETER DeviceName[100];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES SupportsStatusActive,SupportsStatusFault,SupportsStatusTampered,SupportsStatusLowBattery
	propDefaultValue = 0d;
	propList = { 0d, "False" }, { 1d,"True"};
#END_PARAMETER_PROPERTIES

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
INTEGER StartupLock;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Change Occupancy_Fb
{
	While(StartupLock)
		processlogic();
	If(Occupancy_Fb = on)
	{
	    HBOccupancySensor.SetOccupancyDetectedFeedback(DeviceName,1);
	}
	Else
	{
	    HBOccupancySensor.SetOccupancyDetectedFeedback(DeviceName,0);
	}
}

Change StatusActive_Fb
{
	While(StartupLock)
		processlogic();
	If(StatusActive_Fb = on)
	{
	    HBOccupancySensor.SetStatusActiveFeedback(DeviceName,1);
	}
	Else
	{
	    HBOccupancySensor.SetStatusActiveFeedback(DeviceName,0);
	}
}

Change StatusFault_Fb
{
	While(StartupLock)
		processlogic();
	If(StatusFault_Fb = on)
	{
	    HBOccupancySensor.SetStatusFaultFeedback(DeviceName,1);
	}
	Else
	{
	    HBOccupancySensor.SetStatusFaultFeedback(DeviceName,0);
	}
}

Change StatusTampered_Fb
{
	While(StartupLock)
		processlogic();
	If(StatusTampered_Fb = on)
	{
	    HBOccupancySensor.SetStatusTamperedFeedback(DeviceName,1);
	}
	Else
	{
	    HBOccupancySensor.SetStatusTamperedFeedback(DeviceName,0);
	}
}

Change StatusLowBattery_Fb
{
	While(StartupLock)
		processlogic();
	If(StatusLowBattery_Fb = on)
	{
	    HBOccupancySensor.SetStatusLowBatteryFeedback(DeviceName,1);
	}
	Else
	{
	    HBOccupancySensor.SetStatusLowBatteryFeedback(DeviceName,0);
	}
}

PUSH RemoveDevice
{
	HBOccupancySensor.RemoveDevice(DeviceName);
} 
PUSH ResetDeviceConfig
{
	HBOccupancySensor.RemoveDevice(DeviceName);
	HBOccupancySensor.AddDevice(DeviceName,SupportsStatusActive,SupportsStatusFault,SupportsStatusTampered,SupportsStatusLowBattery,"Local");
}


EVENTHANDLER _OccupancySensorEvent(HBCrestronEventArgs e)
{
	if(e.Name = DeviceName)
	{
		
	}	
}

EVENTHANDLER _ConnectionEvent(EventArgs e)
{
	HBOccupancySensor.AddDevice(DeviceName,SupportsStatusActive,SupportsStatusFault,SupportsStatusTampered,SupportsStatusLowBattery,"Local");
	StartupLock = 0;
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	StartupLock = 1;
	waitforinitializationcomplete();
	RegisterEvent(HBCrestron,HBWebSocketClientConnectionEvent,_ConnectionEvent);
	RegisterEvent(HBOccupancySensor,OccupancySensorEvent,_OccupancySensorEvent);
}


